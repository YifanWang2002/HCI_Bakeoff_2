import java.util.ArrayList;
import java.util.Collections;

int trialCount = 10; //this will be set higher for the bakeoff
final float screenPPI = 126; //what is the Pixels Per Inch of the screen you are using 

//these are variables you should probably leave alone
int index = 0; //starts at zero-ith trial
float windowPadding = 0; //some padding from the sides of window, set later
int trialIndex = 0; //what trial are we on
int errorCount = 0;  //used to keep track of errors
float errorPenalty = 0.5f; //for every error, add this value to mean time
int startTime = 0; // time starts when the first click is captured
int finishTime = 0; //records the time of the final click
boolean userDone = false; //is the user done

//These variables are for my example design. Your input code should modify/replace these!
float logoX = 500; //global variable for the X position of the logo
float logoY = 500; //global variable for the Y position of the logo
float logoS = 50f; //global variable for the Size position of the logo
float logoR = 0; //global variable for the Rotation position of the logo

PFont smallFont;
PFont largeFont;

private class Destination
{
  float x = 0; //the X position of this destination square
  float y = 0; //the Y position of this destination square
  float s = 0; //the Size position of this destination square
  float r = 0;//the Rotation position of this destination square
}

ArrayList<Destination> destinations = new ArrayList<Destination>();

void setup() {
  size(1200, 800);
  rectMode(CENTER);
  largeFont = createFont("Arial", inchToPix(.3f)); //sets the font to Arial that is 0.3" tall
  smallFont = createFont("Arial", inchToPix(.1f)); //sets the font to Arial that is 0.3" tall
  
  textAlign(CENTER);
  rectMode(CENTER); //draw rectangles not from upper left, but from the center outwards
  
  //Don't change this! 
  windowPadding = inchToPix(1f); //padding of 1.0 inches; stops destination squares generating with centers outside this area

  //create a bunch of random destination squares. Don't change this!
  for (int i=0; i<trialCount; i++) 
  {
    Destination d = new Destination();
    d.x = random(windowPadding, width-windowPadding); //set a random x with some padding
    d.y = random(windowPadding, height-windowPadding); //set a random y with some padding
    d.r = random(0, 360); //random rotation between 0 and 360
    d.s = inchToPix((float)random(1,12)/4.0f); //increasing size from 0.25" up to 3.0" 
    destinations.add(d);
    println("created destination with values: " + d.x + "," + d.y + "," + d.r + "," + d.s);
  }

  Collections.shuffle(destinations); // randomize the order of the button; don't change this.
}

void draw() {
  background(40); //background is dark grey. Can't change this.
  noStroke();
  
  //next two lines are just for testing if your PPI is set correctly. It should be 1x1" on your screen if correct. This can be removed for the Bakeoff.
  fill(200,200,200);
  rect(width/2,height/2, inchToPix(1f), inchToPix(1f)); 
  
  fill(200);
  textFont(largeFont);
  //shouldn't really modify this printout code unless there is a really good reason to
  if (userDone)
  {
    text("User completed " + trialCount + " trials", width/2, inchToPix(.4f));
    text("User had " + errorCount + " error(s)", width/2, inchToPix(.4f)*2);
    text("User took " + (finishTime-startTime)/1000f/trialCount + " sec per destination", width/2, inchToPix(.4f)*3);
    text("User took " + ((finishTime-startTime)/1000f/trialCount+(errorCount*errorPenalty)) + " sec per destination inc. penalty", width/2, inchToPix(.4f)*4);
    return;
  }

  //===========DRAW DESTINATION SQUARES=================
  for (int i=trialIndex; i<trialCount; i++) // reduces over time
  {
    pushMatrix();
    Destination d = destinations.get(i); //get destination trial
    translate(d.x, d.y); //center the drawing coordinates to the center of the destination trial
    rotate(radians(d.r)); //rotate around the origin of the destination trial
    noFill();
    strokeWeight(3f);
    if (trialIndex==i)
      stroke(255, 0, 0, 192); //set color to semi translucent
    else
      stroke(128, 128, 128, 128); //set color to semi translucent
    rect(0, 0, d.s, d.s);
    popMatrix();
  }

  //===========DRAW LOGO SQUARE=================
  pushMatrix();
  translate(logoX, logoY); //translate draw center to the center oft he logo square
  rotate(radians(logoR)); //rotate using the logo square as the origin
  noStroke();
  fill(60, 60, 192, 192);
  rect(0, 0, logoS, logoS);
  fill(255);
  textFont(smallFont);
  text("LOGO",0,0);
  popMatrix();

  //===========DRAW EXAMPLE CONTROLS=================
  fill(255);
  textFont(largeFont);
  scaffoldControlLogic(); //you are going to want to replace this!
  text("Trial " + (trialIndex+1) + " of " +trialCount, width/2, inchToPix(.8f));
}

//my example design for control, which is a terrible design
void scaffoldControlLogic()
{
  //upper left corner, rotate counterclockwise
  text("CCW", inchToPix(.4f), inchToPix(.4f));
  if (mousePressed && dist(0, 0, mouseX, mouseY)<inchToPix(.8f))
    logoR--;

  //upper right corner, rotate clockwise
  text("CW", width-inchToPix(.4f), inchToPix(.4f));
  if (mousePressed && dist(width, 0, mouseX, mouseY)<inchToPix(.8f))
    logoR++;

  //lower left corner, decrease Z
  text("-", inchToPix(.4f), height-inchToPix(.4f));
  if (mousePressed && dist(0, height, mouseX, mouseY)<inchToPix(.8f))
    logoS = constrain(logoS-inchToPix(.02f), inchToPix(0.25f), inchToPix(4f)); //leave min and max alone!

  //lower right corner, increase Z
  text("+", width-inchToPix(.4f), height-inchToPix(.4f));
  if (mousePressed && dist(width, height, mouseX, mouseY)<inchToPix(.8f))
    logoS = constrain(logoS+inchToPix(.02f), inchToPix(0.25f), inchToPix(4f)); //leave min and max alone! 

  //left middle, move left
  text("left", inchToPix(.4f), height/2);
  if (mousePressed && dist(0, height/2, mouseX, mouseY)<inchToPix(.8f))
    logoX-=inchToPix(.02f);

  text("right", width-inchToPix(.4f), height/2);
  if (mousePressed && dist(width, height/2, mouseX, mouseY)<inchToPix(.8f))
    logoX+=inchToPix(.02f);

  text("up", width/2, inchToPix(.4f));
  if (mousePressed && dist(width/2, 0, mouseX, mouseY)<inchToPix(.8f))
    logoY-=inchToPix(.02f);

  text("down", width/2, height-inchToPix(.4f));
  if (mousePressed && dist(width/2, height, mouseX, mouseY)<inchToPix(.8f))
    logoY+=inchToPix(.02f);
  drawAdjustmentGuide(); 
}

void drawAdjustmentGuide() {
  if(trialIndex >= destinations.size()) return; // Guard against index out of bounds
  
  Destination target = destinations.get(trialIndex);
  float distanceX = target.x - logoX;
  float distanceY = target.y - logoY;
  float sizeDifference = target.s - logoS;
  float rotationDifference = (float)calculateDifferenceBetweenAngles(target.r, logoR);
  
  // Calculate clicks needed based on the effect of each button
  int clicksRight = (int)(distanceX / inchToPix(.02f));
  int clicksUp = (int)(-distanceY / inchToPix(.02f));
  int clicksCW = (int)(rotationDifference / 1); // Assuming each click rotates 1 degree
  int clicksSizeIncrease = (int)(sizeDifference / inchToPix(.02f));
  
  // Adjusting for the direction of the required clicks
  String horizontalAdjustment = clicksRight > 0 ? "Right: " + clicksRight : "Left: " + Math.abs(clicksRight);
  String verticalAdjustment = clicksUp > 0 ? "Up: " + clicksUp : "Down: " + Math.abs(clicksUp);
  String rotationAdjustment = clicksCW > 0 ? "CW: " + clicksCW : "CCW: " + Math.abs(clicksCW);
  String sizeAdjustment = clicksSizeIncrease > 0 ? "+: " + clicksSizeIncrease : "-: " + Math.abs(clicksSizeIncrease);
  
  // Display the guidance
  textFont(smallFont);
  fill(255, 255, 0); // Yellow for visibility
  text(horizontalAdjustment + ", " + verticalAdjustment, width / 2, height - inchToPix(1.5f));
  text(rotationAdjustment + ", " + sizeAdjustment, width / 2, height - inchToPix(1.0f));
}

void mousePressed()
{
  if (startTime == 0) //start time on the instant of the first user click
  {
    startTime = millis();
    println("time started!");
  }
}

void mouseReleased()
{
  //check to see if user clicked middle of screen within 1 inches, which this code uses as a submit button. This is a terrible design you should probably replace.
  if (dist(width/2, height/2, mouseX, mouseY)<inchToPix(1f))
  {
    if (userDone==false && !checkForSuccess())
      errorCount++;

    trialIndex++; //and move on to next trial

    if (trialIndex==trialCount && userDone==false)
    {
      userDone = true;
      finishTime = millis();
    }
  }
}

//probably shouldn't modify this, but email me if you want to for some good reason.
public boolean checkForSuccess()
{
  Destination d = destinations.get(trialIndex);	
  boolean closeDist = dist(d.x, d.y, logoX, logoY)<inchToPix(.05f); //has to be within +-0.05"
  boolean closeRotation = calculateDifferenceBetweenAngles(d.r, logoR)<=5;
  boolean closeSize = abs(d.s - logoS)<inchToPix(.1f); //has to be within +-0.1"	

  println("Close Enough Distance: " + closeDist + " (logo X/Y = " + d.x + "/" + d.y + ", destination X/Y = " + logoX + "/" + logoY +")");
  println("Close Enough Rotation: " + closeRotation + " (rot dist="+calculateDifferenceBetweenAngles(d.r, logoR)+")");
  println("Close Enough Size: " +  closeSize + " (logo Z = " + d.s + ", destination Z = " + logoS +")");
  println("Close enough all: " + (closeDist && closeRotation && closeSize));

  return closeDist && closeRotation && closeSize;
}

//utility function I include to calc diference between two angles
double calculateDifferenceBetweenAngles(float a1, float a2)
{
  double diff=abs(a1-a2);
  diff%=90;
  if (diff>45)
    return 90-diff;
  else
    return diff;
}

//utility function to convert inches into pixels based on screen PPI
float inchToPix(float inch)
{
  return inch*screenPPI;
}
